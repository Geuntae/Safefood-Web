<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mybatis.mapper.CustomerMapper">

	<!-- myBatis가 이용하는 query문장이 들어 있는 파일 java Mapper에 의해 이용됨. java Mapper - 
		xml Mapper - myBatis java Mapper안에 있는 메소드 이름과 xml Mapper 안의 query id가 일치해야 
		함. -->

	<!-- 리절트 맵 정의. primary key 컬럼은 id 태그로 표시해줌 -->
	<resultMap id="CustomerResult" type="Customer"> <!--type=Customer로 만들면 일단 비어있는걸로 만들구 밑에 <result>에서 SetNum , setName, setAddress 
			해주는거임 그래서 항상 resultMap(뒷처리) 필수 -->
		<result column="num" property="num" /> <!--property = "num" 의 의미는 레코드 갯수 만큼 VO내부에서 list에 Cusotmer정보 하나의 객체를 계속 저장함 -->
		<result column="name" property="name" />
		<result column="address" property="address" />
	</resultMap>

	<select id="selectAll" resultMap="CustomerResult"> <!--resultMap은 쿼리를 실행한 후에 데이터 값을(JDBC에서 WHILE문 돌리듣이) CustomerResult객체가 해줄거다. -->
		select * from customer order by num
	</select>

	<select id="selectOne" resultMap="CustomerResult"
		parameterType="String">
		select * from customer where num = #{num} <!-- mybatis에서는 #{num} = ? -->
	</select>
	
	<insert id="insert" parameterType="Customer">
		insert into customer values ( #{num}, #{name}, #{address})
	</insert>
	
	<insert id="insert2" parameterType="Customer">
		insert into customer values ( #{num}, #{name}, #{address})
	</insert>
	
	<delete id="delete" parameterType="String">
		delete from customer where num = #{num}
	</delete>
	
	<update id="update" parameterType="Customer">
		update customer set name=#{name}, address=#{address} where num=#{num};
	</update>
	
	<select id="findByAddress" resultMap="CustomerResult" parameterType="String">
	select * from customer where address = #{address}
	</select>




</mapper>








